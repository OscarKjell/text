on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

name: OS_installation_steps_and_check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-24.04, r: 'release'}
#          - {os: macOS-latest, r: '4.3.0', python: '3.9'}
#          - {os: macOS-latest, r: '4.3.0', python: '3.11'}

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      # Set up R environment
      - uses: r-lib/actions/setup-r@v2-branch
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2-branch

      - name: Query R Dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      # Cache R packages
      - name: Cache R Packages
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      # stringi for ubuntu
      - name: Reinstall stringi from source on Ubuntu 24.04
        if: matrix.config.os == 'ubuntu-24.04'
        run: |
          install.packages("stringi", type = "source")
        shell: Rscript {0}

      # Install R dependencies
      - name: Install R Dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      # TEST 1: test textDiagnostics() after package install and check system dependencies
      - name: textDiagnostics -- install text
        run: |
          install.packages("devtools")
          library(devtools)
          devtools::install_github("oscarkjell/text")
          library(text)
          log <- textDiagnostics()
          log
        shell: Rscript {0}

      # Test 2: test textrpp_install() for stopping and informating which dependenies he user needs
      - name: textrpp_install -- Graceful Fail
        if: runner.os != 'Windows'
        run: |
          text::textrpp_install(prompt = FALSE)
        shell: Rscript {0}


       # Intall macOS dependencies to solve OMP issues
      - name: Install macOS OMP dependencies
        if: runner.os == 'macOS'
        run: |
          brew update || echo "Homebrew update failed"
          brew install libomp || echo "libomp installation failed"
          brew install qpdf || echo "qpdf installation failed but continuing"
          export DYLD_LIBRARY_PATH=$(brew --prefix libomp)/lib
          echo "DYLD_LIBRARY_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV


      # Install system dependencies fo Ubuntu
      # removed libfreetype6-dev \ libgit2-dev \  libcairo2-dev \
      - name: Install Ubuntu dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
          libcurl4-openssl-dev \
          libssl-dev \
          libharfbuzz-dev \
          libfribidi-dev \
          libxml2-dev \
          libpng-dev \
          libtiff5-dev \
          libjpeg-dev \
          libfontconfig1-dev \
          libicu-dev \
          default-jdk
          sudo R CMD javareconf

      # Test 3. textrpp_install() to actually install when dependencies are satisfied.
      - name: textrpp_install -- install the text
        run: |
          text::textrpp_install(prompt = FALSE)
        shell: Rscript {0}


      # Test 4. textrpp_initialize() and testing to make embeddings
      - name: textrpp_initialize -- test embeddings
        run: |
          library(text)
          text::textrpp_initialize(textEmbed_test = TRUE)
        shell: Rscript {0}


      # Session Info
      - name: Session Info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}
