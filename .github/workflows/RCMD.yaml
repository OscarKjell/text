on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release'}

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      # Set up R environment
      - uses: r-lib/actions/setup-r@v2-branch
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2-branch

      # Install system dependencies (macOS only)
      - name: Install System Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install jpeg
          brew install openjdk
          sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
          export JAVA_HOME=$(/usr/libexec/java_home)
          echo "JAVA_HOME=$(/usr/libexec/java_home)" >> $GITHUB_ENV
          echo 'PATH="/opt/homebrew/opt/openjdk/bin:$PATH"' >> ~/.zshrc

      # Install system dependencies (Linux only)
      - name: Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libjpeg-dev openjdk-11-jdk
          sudo apt install -y libgomp1 libxml2-dev libssl-dev libcurl4-openssl-dev
          export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
          echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          echo 'PATH="/usr/lib/jvm/java-11-openjdk-amd64/bin:$PATH"' >> ~/.bashrc

      # Install rJava
      - name: Install rJava
        run: |
          install.packages("rJava", repos = "https://cran.r-project.org", type = "source")
          library(rJava)
          .jinit()
          .jcall("java/lang/System", "S", "getProperty", "java.version")
        shell: Rscript {0}

      # Install Correct parsnip Version
      - name: Install parsnip 1.2.1
        run: |
          install.packages("remotes", repos = "https://cran.r-project.org")
          options(repos = c(CRAN = "https://cran.r-project.org"))
          remotes::install_version("parsnip", version = "1.2.1", repos = "https://cran.r-project.org", type = "source")
          if (packageVersion("parsnip") != "1.2.1") {
            stop("Error: parsnip did not install correctly!")
          }
        shell: Rscript {0}

      - name: Restart R Session
        run: Rscript -e 'q("no")'

      # Install R Dependencies Without Upgrading
      - name: Install R Dependencies Without Upgrading
        run: |
          options(repos = c(CRAN = "https://cran.r-project.org"))
          options(pkgType = "source")
          remotes::install_deps(dependencies = TRUE, upgrade = "never")
          if (packageVersion("parsnip") != "1.2.1") {
            stop("Error: parsnip version changed after dependency installation!")
          }
        shell: Rscript {0}

      - name: Check Installed Package Dependencies
        run: Rscript -e 'print(tools::package_dependencies("parsnip", db = available.packages(), recursive = TRUE))'

      # Install and Test "text" Package
      - name: Install and Test "text" Package
        run: |
          install.packages("devtools")
          library(devtools)
          devtools::install_github("theharmonylab/topics")
          devtools::install_github("oscarkjell/text")
          text::textrpp_install(prompt = FALSE)
          text::textrpp_initialize(textEmbed_test = TRUE)
        shell: Rscript {0}

      # Session Info
      - name: Session Info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      # Run R CMD check
      - name: R CMD Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
          OMP_MAX_ACTIVE_LEVELS: 0
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
