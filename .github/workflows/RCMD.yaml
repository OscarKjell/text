on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release'}

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      # Set up R environment (ensure R is installed before running R commands)
      - uses: r-lib/actions/setup-r@v2-branch
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2-branch

      # Install Specific Versions for Compatibility
      - name: Install Specific Versions for Compatibility
        run: |
          install.packages("remotes", repos = "https://cran.r-project.org")
          options(repos = c(CRAN = "https://cran.r-project.org"))
          remotes::install_version("parsnip", version = "1.2.1", repos = "https://cran.r-project.org", type = "source")
          remotes::install_version("workflows", version = "1.1.4", repos = "https://cran.r-project.org", type = "source")
          remotes::install_version("tune", version = "1.0.2", repos = "https://cran.r-project.org", type = "source")
          remotes::install_version("rsample", version = "1.1.1", repos = "https://cran.r-project.org", type = "source")
          remotes::install_version("recipes", version = "1.0.8", repos = "https://cran.r-project.org", type = "source")
          remotes::install_version("yardstick", version = "1.2.0", repos = "https://cran.r-project.org", type = "source")
        shell: Rscript {0}

      - name: Restart R Session After Installing Pinned Versions
        run: Rscript -e 'q("no")'

      # Install R Dependencies Without Upgrading
      - name: Install R Dependencies Without Upgrading
        run: |
          install.packages("remotes", repos = "https://cran.r-project.org")
          options(repos = c(CRAN = "https://cran.r-project.org"))
          remotes::install_deps(dependencies = TRUE, upgrade = "never")
        shell: Rscript {0}

      - name: Check Installed Package Dependencies
        run: Rscript -e 'print(tools::package_dependencies("parsnip", db = available.packages(), recursive = TRUE))'

      # Install and Test "text" Package
      - name: Install and Test "text" Package
        run: |
          install.packages("devtools")
          library(devtools)
          devtools::install_github("theharmonylab/topics")
          devtools::install_github("oscarkjell/text")
          text::textrpp_install(prompt = FALSE)
          text::textrpp_initialize(textEmbed_test = TRUE)
        shell: Rscript {0}

      # Session Info
      - name: Session Info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      # Run R CMD check
      - name: R CMD Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
          OMP_MAX_ACTIVE_LEVELS: 0
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
